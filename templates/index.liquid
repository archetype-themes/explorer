<style>
  html,
  body {
    background: white;
  }

  .component-list {
    display: flex;
    align-items: flex-start;
    flex-direction: column;
    gap: 1px;
    margin-top: 0;
    min-width: 320px;
    padding: 0;
    border-radius: 2px;
    background: #cccfcc;
    box-shadow: 0 0 0 1px #cccfcc;
  }

  .component-item {
    display: flex;
    align-items: center;
    align-self: stretch;
    gap: 8px;
    padding: 6px;
    background: #f2f3f2;
  }

  .component-item:hover {
    background: #e4e7e4;
  }

  .component-link {
    color: #555954;
    font-family: 'IBM Plex Mono', monospace;
    font-size: 14px;
    font-style: normal;
    font-weight: 500;
    letter-spacing: -0.28px;
    line-height: 22px;
    text-decoration: none;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    padding-right: 0.5rem;
  }

  .component-link:hover {
    color: #1d211c;
  }
</style>

<template id="component-link-template">
  <li class="component-item">
    <a class="component-link"> <span class="name"></span><span>&rarr;</span> </a>
  </li>
</template>

<component-explorer></component-explorer>
{% render 'template-map' %}

<script>
  class ComponentExplorer extends HTMLElement {
    constructor() {
      super();
      this.template = document.getElementById('component-link-template');
      this.templateMap = JSON.parse(document.querySelector('[data-template-map]').textContent);
    }

    connectedCallback() {
      this.render();
    }

    render() {
      const ul = document.createElement('ul');
      ul.className = 'component-list';

      Object.entries(this.templateMap).forEach(([name, routes]) => {
        const [category] = Object.keys(routes);
        const url = routes[category];

        const clone = this.template.content.cloneNode(true);
        const a = clone.querySelector('a');
        const nameSpan = clone.querySelector('.name');

        a.href = url;
        nameSpan.textContent = name;

        ul.appendChild(clone);
      });

      this.appendChild(ul);
    }
  }

  customElements.define('component-explorer', ComponentExplorer);
</script>
